// This file is auto-generated by @hey-api/openapi-ts

export const $FactionSymbol = {
    type: 'string',
    description: 'The symbol of the faction.',
    minLength: 1,
    enum: ['COSMIC', 'VOID', 'GALACTIC', 'QUANTUM', 'DOMINION', 'ASTRO', 'CORSAIRS', 'OBSIDIAN', 'AEGIS', 'UNITED', 'SOLITARY', 'COBALT', 'OMEGA', 'ECHO', 'LORDS', 'CULT', 'ANCIENTS', 'SHADOW', 'ETHEREAL']
} as const;

export const $Agent = {
    description: 'Agent details.',
    type: 'object',
    properties: {
        accountId: {
            type: 'string',
            minLength: 1,
            description: 'Account ID that is tied to this agent. Only included on your own agent.'
        },
        symbol: {
            type: 'string',
            minLength: 3,
            maxLength: 14,
            description: 'Symbol of the agent.'
        },
        headquarters: {
            type: 'string',
            minLength: 1,
            description: 'The headquarters of the agent.'
        },
        credits: {
            type: 'integer',
            format: 'int64',
            description: 'The number of credits the agent has available. Credits can be negative if funds have been overdrawn.'
        },
        startingFaction: {
            type: 'string',
            minLength: 1,
            description: 'The faction the agent started with.'
        },
        shipCount: {
            type: 'integer',
            description: 'How many ships are owned by the agent.'
        }
    },
    required: ['symbol', 'headquarters', 'credits', 'startingFaction', 'shipCount']
} as const;

export const $ContractPayment = {
    type: 'object',
    description: 'Payments for the contract.',
    properties: {
        onAccepted: {
            type: 'integer',
            description: 'The amount of credits received up front for accepting the contract.'
        },
        onFulfilled: {
            type: 'integer',
            description: 'The amount of credits received when the contract is fulfilled.'
        }
    },
    required: ['onAccepted', 'onFulfilled']
} as const;

export const $ContractDeliverGood = {
    description: 'The details of a delivery contract. Includes the type of good, units needed, and the destination.',
    type: 'object',
    properties: {
        tradeSymbol: {
            type: 'string',
            description: 'The symbol of the trade good to deliver.',
            minLength: 1
        },
        destinationSymbol: {
            type: 'string',
            description: 'The destination where goods need to be delivered.',
            minLength: 1
        },
        unitsRequired: {
            type: 'integer',
            description: 'The number of units that need to be delivered on this contract.'
        },
        unitsFulfilled: {
            type: 'integer',
            description: 'The number of units fulfilled on this contract.'
        }
    },
    required: ['tradeSymbol', 'destinationSymbol', 'unitsRequired', 'unitsFulfilled']
} as const;

export const $ContractTerms = {
    type: 'object',
    description: 'The terms to fulfill the contract.',
    properties: {
        deadline: {
            type: 'string',
            format: 'date-time',
            description: 'The deadline for the contract.'
        },
        payment: {
            '$ref': '#/components/schemas/ContractPayment'
        },
        deliver: {
            type: 'array',
            description: 'The cargo that needs to be delivered to fulfill the contract.',
            items: {
                '$ref': '#/components/schemas/ContractDeliverGood'
            }
        }
    },
    required: ['deadline', 'payment']
} as const;

export const $Contract = {
    description: 'Contract details.',
    type: 'object',
    properties: {
        id: {
            type: 'string',
            minLength: 1,
            description: 'ID of the contract.'
        },
        factionSymbol: {
            type: 'string',
            minLength: 1,
            description: 'The symbol of the faction that this contract is for.'
        },
        type: {
            type: 'string',
            enum: ['PROCUREMENT', 'TRANSPORT', 'SHUTTLE'],
            description: 'Type of contract.'
        },
        terms: {
            '$ref': '#/components/schemas/ContractTerms'
        },
        accepted: {
            type: 'boolean',
            default: false,
            description: 'Whether the contract has been accepted by the agent'
        },
        fulfilled: {
            type: 'boolean',
            default: false,
            description: 'Whether the contract has been fulfilled'
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            description: 'Deprecated in favor of deadlineToAccept',
            deprecated: true
        },
        deadlineToAccept: {
            type: 'string',
            format: 'date-time',
            description: 'The time at which the contract is no longer available to be accepted'
        }
    },
    required: ['id', 'factionSymbol', 'type', 'terms', 'accepted', 'fulfilled', 'expiration']
} as const;

export const $FactionTraitSymbol = {
    type: 'string',
    description: 'The unique identifier of the trait.',
    enum: ['BUREAUCRATIC', 'SECRETIVE', 'CAPITALISTIC', 'INDUSTRIOUS', 'PEACEFUL', 'DISTRUSTFUL', 'WELCOMING', 'SMUGGLERS', 'SCAVENGERS', 'REBELLIOUS', 'EXILES', 'PIRATES', 'RAIDERS', 'CLAN', 'GUILD', 'DOMINION', 'FRINGE', 'FORSAKEN', 'ISOLATED', 'LOCALIZED', 'ESTABLISHED', 'NOTABLE', 'DOMINANT', 'INESCAPABLE', 'INNOVATIVE', 'BOLD', 'VISIONARY', 'CURIOUS', 'DARING', 'EXPLORATORY', 'RESOURCEFUL', 'FLEXIBLE', 'COOPERATIVE', 'UNITED', 'STRATEGIC', 'INTELLIGENT', 'RESEARCH_FOCUSED', 'COLLABORATIVE', 'PROGRESSIVE', 'MILITARISTIC', 'TECHNOLOGICALLY_ADVANCED', 'AGGRESSIVE', 'IMPERIALISTIC', 'TREASURE_HUNTERS', 'DEXTEROUS', 'UNPREDICTABLE', 'BRUTAL', 'FLEETING', 'ADAPTABLE', 'SELF_SUFFICIENT', 'DEFENSIVE', 'PROUD', 'DIVERSE', 'INDEPENDENT', 'SELF_INTERESTED', 'FRAGMENTED', 'COMMERCIAL', 'FREE_MARKETS', 'ENTREPRENEURIAL']
} as const;

export const $FactionTrait = {
    type: 'object',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/FactionTraitSymbol'
        },
        name: {
            type: 'string',
            description: 'The name of the trait.'
        },
        description: {
            type: 'string',
            description: 'A description of the trait.'
        }
    },
    required: ['symbol', 'name', 'description']
} as const;

export const $Faction = {
    description: 'Faction details.',
    type: 'object',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/FactionSymbol'
        },
        name: {
            type: 'string',
            minLength: 1,
            description: 'Name of the faction.'
        },
        description: {
            type: 'string',
            minLength: 1,
            description: 'Description of the faction.'
        },
        headquarters: {
            type: 'string',
            minLength: 1,
            description: "The waypoint in which the faction's HQ is located in."
        },
        traits: {
            type: 'array',
            description: 'List of traits that define this faction.',
            items: {
                '$ref': '#/components/schemas/FactionTrait'
            }
        },
        isRecruiting: {
            type: 'boolean',
            description: 'Whether or not the faction is currently recruiting new agents.'
        }
    },
    required: ['symbol', 'name', 'description', 'traits', 'isRecruiting']
} as const;

export const $ShipRole = {
    type: 'string',
    description: 'The registered role of the ship',
    enum: ['FABRICATOR', 'HARVESTER', 'HAULER', 'INTERCEPTOR', 'EXCAVATOR', 'TRANSPORT', 'REPAIR', 'SURVEYOR', 'COMMAND', 'CARRIER', 'PATROL', 'SATELLITE', 'EXPLORER', 'REFINERY']
} as const;

export const $ShipRegistration = {
    type: 'object',
    description: 'The public registration information of the ship',
    properties: {
        name: {
            type: 'string',
            description: "The agent's registered name of the ship",
            minLength: 1
        },
        factionSymbol: {
            type: 'string',
            description: 'The symbol of the faction the ship is registered with',
            minLength: 1
        },
        role: {
            '$ref': '#/components/schemas/ShipRole'
        }
    },
    required: ['name', 'factionSymbol', 'role']
} as const;

export const $SystemSymbol = {
    type: 'string',
    description: 'The symbol of the system.',
    minLength: 1,
    'x-faker': {
        fake: ['X1-{{random.alphaNumeric(5)}}']
    }
} as const;

export const $WaypointSymbol = {
    type: 'string',
    description: 'The symbol of the waypoint.',
    minLength: 1,
    'x-faker': {
        fake: ['X1-{{random.alphaNumeric(5)}}-{{random.alphaNumeric(5)}}']
    }
} as const;

export const $WaypointType = {
    type: 'string',
    description: 'The type of waypoint.',
    enum: ['PLANET', 'GAS_GIANT', 'MOON', 'ORBITAL_STATION', 'JUMP_GATE', 'ASTEROID_FIELD', 'ASTEROID', 'ENGINEERED_ASTEROID', 'ASTEROID_BASE', 'NEBULA', 'DEBRIS_FIELD', 'GRAVITY_WELL', 'ARTIFICIAL_GRAVITY_WELL', 'FUEL_STATION']
} as const;

export const $ShipNavRouteWaypoint = {
    description: 'The destination or departure of a ships nav route.',
    type: 'object',
    properties: {
        symbol: {
            type: 'string',
            minLength: 1,
            description: 'The symbol of the waypoint.'
        },
        type: {
            '$ref': '#/components/schemas/WaypointType'
        },
        systemSymbol: {
            '$ref': '#/components/schemas/SystemSymbol'
        },
        x: {
            type: 'integer',
            description: 'Position in the universe in the x axis.'
        },
        y: {
            type: 'integer',
            description: 'Position in the universe in the y axis.'
        }
    },
    required: ['symbol', 'type', 'systemSymbol', 'x', 'y']
} as const;

export const $ShipNavRoute = {
    type: 'object',
    description: "The routing information for the ship's most recent transit or current location.",
    properties: {
        destination: {
            '$ref': '#/components/schemas/ShipNavRouteWaypoint'
        },
        origin: {
            '$ref': '#/components/schemas/ShipNavRouteWaypoint'
        },
        departureTime: {
            type: 'string',
            format: 'date-time',
            description: "The date time of the ship's departure."
        },
        arrival: {
            type: 'string',
            format: 'date-time',
            description: "The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival."
        }
    },
    required: ['destination', 'departure', 'origin', 'departureTime', 'arrival']
} as const;

export const $ShipNavStatus = {
    type: 'string',
    description: 'The current status of the ship',
    enum: ['IN_TRANSIT', 'IN_ORBIT', 'DOCKED']
} as const;

export const $ShipNavFlightMode = {
    type: 'string',
    description: "The ship's set speed when traveling between waypoints or systems.",
    enum: ['DRIFT', 'STEALTH', 'CRUISE', 'BURN'],
    default: 'CRUISE'
} as const;

export const $ShipNav = {
    type: 'object',
    description: 'The navigation information of the ship.',
    properties: {
        systemSymbol: {
            '$ref': '#/components/schemas/SystemSymbol'
        },
        waypointSymbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        route: {
            '$ref': '#/components/schemas/ShipNavRoute'
        },
        status: {
            '$ref': '#/components/schemas/ShipNavStatus'
        },
        flightMode: {
            '$ref': '#/components/schemas/ShipNavFlightMode'
        }
    },
    required: ['systemSymbol', 'waypointSymbol', 'route', 'status', 'flightMode']
} as const;

export const $ShipCrew = {
    type: 'object',
    description: "The ship's crew service and maintain the ship's systems and equipment.",
    properties: {
        current: {
            type: 'integer',
            description: 'The current number of crew members on the ship.'
        },
        required: {
            type: 'integer',
            description: 'The minimum number of crew members required to maintain the ship.'
        },
        capacity: {
            type: 'integer',
            description: 'The maximum number of crew members the ship can support.'
        },
        rotation: {
            type: 'string',
            description: "The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.",
            enum: ['STRICT', 'RELAXED'],
            default: 'STRICT'
        },
        morale: {
            type: 'integer',
            description: "A rough measure of the crew's morale. A higher morale means the crew is happier and more productive. A lower morale means the ship is more prone to accidents.",
            minimum: 0,
            maximum: 100
        },
        wages: {
            type: 'integer',
            description: 'The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.',
            minimum: 0
        }
    },
    required: ['current', 'required', 'capacity', 'rotation', 'morale', 'wages']
} as const;

export const $ShipComponentCondition = {
    type: 'number',
    format: 'double',
    description: 'The repairable condition of a component. A value of 0 indicates the component needs significant repairs, while a value of 1 indicates the component is in near perfect condition. As the condition of a component is repaired, the overall integrity of the component decreases.',
    minimum: 0,
    maximum: 1
} as const;

export const $ShipComponentIntegrity = {
    type: 'number',
    format: 'double',
    description: 'The overall integrity of the component, which determines the performance of the component. A value of 0 indicates that the component is almost completely degraded, while a value of 1 indicates that the component is in near perfect condition. The integrity of the component is non-repairable, and represents permanent wear over time.',
    minimum: 0,
    maximum: 1
} as const;

export const $ShipRequirements = {
    type: 'object',
    description: 'The requirements for installation on a ship',
    properties: {
        power: {
            type: 'integer',
            description: 'The amount of power required from the reactor.'
        },
        crew: {
            type: 'integer',
            description: 'The number of crew required for operation.'
        },
        slots: {
            type: 'integer',
            description: 'The number of module slots required for installation.'
        }
    }
} as const;

export const $ShipComponentQuality = {
    type: 'number',
    format: 'integer',
    description: 'The overall quality of the component, which determines the quality of the component. High quality components return more ships parts and ship plating when a ship is scrapped. But also require more of these parts to repair. This is transparent to the player, as the parts are bought from/sold to the marketplace.'
} as const;

export const $ShipFrame = {
    type: 'object',
    description: 'The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.',
    properties: {
        symbol: {
            type: 'string',
            enum: ['FRAME_PROBE', 'FRAME_DRONE', 'FRAME_INTERCEPTOR', 'FRAME_RACER', 'FRAME_FIGHTER', 'FRAME_FRIGATE', 'FRAME_SHUTTLE', 'FRAME_EXPLORER', 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT', 'FRAME_DESTROYER', 'FRAME_CRUISER', 'FRAME_CARRIER', 'FRAME_BULK_FREIGHTER'],
            description: 'Symbol of the frame.'
        },
        name: {
            type: 'string',
            description: 'Name of the frame.'
        },
        description: {
            type: 'string',
            description: 'Description of the frame.'
        },
        condition: {
            '$ref': '#/components/schemas/ShipComponentCondition'
        },
        integrity: {
            '$ref': '#/components/schemas/ShipComponentIntegrity'
        },
        moduleSlots: {
            type: 'integer',
            minimum: 0,
            description: 'The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.'
        },
        mountingPoints: {
            type: 'integer',
            minimum: 0,
            description: 'The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.'
        },
        fuelCapacity: {
            type: 'integer',
            minimum: 0,
            description: 'The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.'
        },
        requirements: {
            '$ref': '#/components/schemas/ShipRequirements'
        },
        quality: {
            '$ref': '#/components/schemas/ShipComponentQuality'
        }
    },
    required: ['symbol', 'name', 'condition', 'integrity', 'description', 'moduleSlots', 'mountingPoints', 'fuelCapacity', 'requirements', 'quality']
} as const;

export const $ShipReactor = {
    type: 'object',
    description: "The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.",
    properties: {
        symbol: {
            type: 'string',
            enum: ['REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I'],
            description: 'Symbol of the reactor.'
        },
        name: {
            type: 'string',
            description: 'Name of the reactor.'
        },
        description: {
            type: 'string',
            description: 'Description of the reactor.'
        },
        condition: {
            '$ref': '#/components/schemas/ShipComponentCondition'
        },
        integrity: {
            '$ref': '#/components/schemas/ShipComponentIntegrity'
        },
        powerOutput: {
            type: 'integer',
            minimum: 1,
            description: "The amount of power provided by this reactor. The more power a reactor provides to the ship, the lower the cooldown it gets when using a module or mount that taxes the ship's power."
        },
        requirements: {
            '$ref': '#/components/schemas/ShipRequirements'
        },
        quality: {
            '$ref': '#/components/schemas/ShipComponentQuality'
        }
    },
    required: ['symbol', 'name', 'condition', 'integrity', 'description', 'powerOutput', 'requirements', 'quality']
} as const;

export const $ShipEngine = {
    type: 'object',
    description: 'The engine determines how quickly a ship travels between waypoints.',
    properties: {
        symbol: {
            type: 'string',
            enum: ['ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I'],
            description: 'The symbol of the engine.'
        },
        name: {
            type: 'string',
            description: 'The name of the engine.'
        },
        description: {
            type: 'string',
            description: 'The description of the engine.'
        },
        condition: {
            '$ref': '#/components/schemas/ShipComponentCondition'
        },
        integrity: {
            '$ref': '#/components/schemas/ShipComponentIntegrity'
        },
        speed: {
            type: 'integer',
            minimum: 1,
            description: 'The speed stat of this engine. The higher the speed, the faster a ship can travel from one point to another. Reduces the time of arrival when navigating the ship.'
        },
        requirements: {
            '$ref': '#/components/schemas/ShipRequirements'
        },
        quality: {
            '$ref': '#/components/schemas/ShipComponentQuality'
        }
    },
    required: ['symbol', 'name', 'condition', 'integrity', 'description', 'speed', 'requirements', 'quality']
} as const;

export const $Cooldown = {
    type: 'object',
    description: 'A cooldown is a period of time in which a ship cannot perform certain actions.',
    properties: {
        shipSymbol: {
            type: 'string',
            description: 'The symbol of the ship that is on cooldown',
            minLength: 1
        },
        totalSeconds: {
            type: 'integer',
            description: 'The total duration of the cooldown in seconds',
            minimum: 0
        },
        remainingSeconds: {
            type: 'integer',
            description: 'The remaining duration of the cooldown in seconds',
            minimum: 0
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the cooldown expires in ISO 8601 format'
        }
    },
    required: ['shipSymbol', 'totalSeconds', 'remainingSeconds']
} as const;

export const $ShipModule = {
    type: 'object',
    description: 'A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent.',
    properties: {
        symbol: {
            type: 'string',
            enum: ['MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I', 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I', 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II'],
            description: 'The symbol of the module.'
        },
        capacity: {
            type: 'integer',
            minimum: 0,
            description: 'Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote how much of a bonus the module grants.'
        },
        range: {
            type: 'integer',
            minimum: 0,
            description: 'Modules that have a range will such as a sensor array show this value to denote how far can the module reach with its capabilities.'
        },
        name: {
            type: 'string',
            description: 'Name of this module.'
        },
        description: {
            type: 'string',
            description: 'Description of this module.'
        },
        requirements: {
            '$ref': '#/components/schemas/ShipRequirements'
        }
    },
    required: ['symbol', 'name', 'description', 'requirements']
} as const;

export const $ShipMount = {
    type: 'object',
    description: 'A mount is installed on the exterier of a ship.',
    properties: {
        symbol: {
            type: 'string',
            enum: ['MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I'],
            description: 'Symbo of this mount.'
        },
        name: {
            type: 'string',
            description: 'Name of this mount.'
        },
        description: {
            type: 'string',
            description: 'Description of this mount.'
        },
        strength: {
            type: 'integer',
            minimum: 0,
            description: "Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are."
        },
        deposits: {
            type: 'array',
            description: 'Mounts that have this value denote what goods can be produced from using the mount.',
            items: {
                type: 'string',
                enum: ['QUARTZ_SAND', 'SILICON_CRYSTALS', 'PRECIOUS_STONES', 'ICE_WATER', 'AMMONIA_ICE', 'IRON_ORE', 'COPPER_ORE', 'SILVER_ORE', 'ALUMINUM_ORE', 'GOLD_ORE', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE_ORE', 'MERITIUM_ORE']
            }
        },
        requirements: {
            '$ref': '#/components/schemas/ShipRequirements'
        }
    },
    required: ['symbol', 'name', 'requirements']
} as const;

export const $TradeSymbol = {
    type: 'string',
    enum: ['PRECIOUS_STONES', 'QUARTZ_SAND', 'SILICON_CRYSTALS', 'AMMONIA_ICE', 'LIQUID_HYDROGEN', 'LIQUID_NITROGEN', 'ICE_WATER', 'EXOTIC_MATTER', 'ADVANCED_CIRCUITRY', 'GRAVITON_EMITTERS', 'IRON', 'IRON_ORE', 'COPPER', 'COPPER_ORE', 'ALUMINUM', 'ALUMINUM_ORE', 'SILVER', 'SILVER_ORE', 'GOLD', 'GOLD_ORE', 'PLATINUM', 'PLATINUM_ORE', 'DIAMONDS', 'URANITE', 'URANITE_ORE', 'MERITIUM', 'MERITIUM_ORE', 'HYDROCARBON', 'ANTIMATTER', 'FAB_MATS', 'FERTILIZERS', 'FABRICS', 'FOOD', 'JEWELRY', 'MACHINERY', 'FIREARMS', 'ASSAULT_RIFLES', 'MILITARY_EQUIPMENT', 'EXPLOSIVES', 'LAB_INSTRUMENTS', 'AMMUNITION', 'ELECTRONICS', 'SHIP_PLATING', 'SHIP_PARTS', 'EQUIPMENT', 'FUEL', 'MEDICINE', 'DRUGS', 'CLOTHING', 'MICROPROCESSORS', 'PLASTICS', 'POLYNUCLEOTIDES', 'BIOCOMPOSITES', 'QUANTUM_STABILIZERS', 'NANOBOTS', 'AI_MAINFRAMES', 'QUANTUM_DRIVES', 'ROBOTIC_DRONES', 'CYBER_IMPLANTS', 'GENE_THERAPEUTICS', 'NEURAL_CHIPS', 'MOOD_REGULATORS', 'VIRAL_AGENTS', 'MICRO_FUSION_GENERATORS', 'SUPERGRAINS', 'LASER_RIFLES', 'HOLOGRAPHICS', 'SHIP_SALVAGE', 'RELIC_TECH', 'NOVEL_LIFEFORMS', 'BOTANICAL_SPECIMENS', 'CULTURAL_ARTIFACTS', 'FRAME_PROBE', 'FRAME_DRONE', 'FRAME_INTERCEPTOR', 'FRAME_RACER', 'FRAME_FIGHTER', 'FRAME_FRIGATE', 'FRAME_SHUTTLE', 'FRAME_EXPLORER', 'FRAME_MINER', 'FRAME_LIGHT_FREIGHTER', 'FRAME_HEAVY_FREIGHTER', 'FRAME_TRANSPORT', 'FRAME_DESTROYER', 'FRAME_CRUISER', 'FRAME_CARRIER', 'FRAME_BULK_FREIGHTER', 'REACTOR_SOLAR_I', 'REACTOR_FUSION_I', 'REACTOR_FISSION_I', 'REACTOR_CHEMICAL_I', 'REACTOR_ANTIMATTER_I', 'ENGINE_IMPULSE_DRIVE_I', 'ENGINE_ION_DRIVE_I', 'ENGINE_ION_DRIVE_II', 'ENGINE_HYPER_DRIVE_I', 'MODULE_MINERAL_PROCESSOR_I', 'MODULE_GAS_PROCESSOR_I', 'MODULE_CARGO_HOLD_I', 'MODULE_CARGO_HOLD_II', 'MODULE_CARGO_HOLD_III', 'MODULE_CREW_QUARTERS_I', 'MODULE_ENVOY_QUARTERS_I', 'MODULE_PASSENGER_CABIN_I', 'MODULE_MICRO_REFINERY_I', 'MODULE_SCIENCE_LAB_I', 'MODULE_JUMP_DRIVE_I', 'MODULE_JUMP_DRIVE_II', 'MODULE_JUMP_DRIVE_III', 'MODULE_WARP_DRIVE_I', 'MODULE_WARP_DRIVE_II', 'MODULE_WARP_DRIVE_III', 'MODULE_SHIELD_GENERATOR_I', 'MODULE_SHIELD_GENERATOR_II', 'MODULE_ORE_REFINERY_I', 'MODULE_FUEL_REFINERY_I', 'MOUNT_GAS_SIPHON_I', 'MOUNT_GAS_SIPHON_II', 'MOUNT_GAS_SIPHON_III', 'MOUNT_SURVEYOR_I', 'MOUNT_SURVEYOR_II', 'MOUNT_SURVEYOR_III', 'MOUNT_SENSOR_ARRAY_I', 'MOUNT_SENSOR_ARRAY_II', 'MOUNT_SENSOR_ARRAY_III', 'MOUNT_MINING_LASER_I', 'MOUNT_MINING_LASER_II', 'MOUNT_MINING_LASER_III', 'MOUNT_LASER_CANNON_I', 'MOUNT_MISSILE_LAUNCHER_I', 'MOUNT_TURRET_I', 'SHIP_PROBE', 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR', 'SHIP_BULK_FREIGHTER'],
    description: "The good's symbol."
} as const;

export const $ShipCargoItem = {
    type: 'object',
    description: 'The type of cargo item and the number of units.',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/TradeSymbol'
        },
        name: {
            type: 'string',
            description: 'The name of the cargo item type.'
        },
        description: {
            type: 'string',
            description: 'The description of the cargo item type.'
        },
        units: {
            type: 'integer',
            description: 'The number of units of the cargo item.',
            minimum: 1
        }
    },
    required: ['symbol', 'name', 'description', 'units']
} as const;

export const $ShipCargo = {
    type: 'object',
    properties: {
        capacity: {
            type: 'integer',
            description: 'The max number of items that can be stored in the cargo hold.',
            minimum: 0
        },
        units: {
            type: 'integer',
            description: 'The number of items currently stored in the cargo hold.',
            minimum: 0
        },
        inventory: {
            type: 'array',
            description: 'The items currently in the cargo hold.',
            items: {
                '$ref': '#/components/schemas/ShipCargoItem'
            }
        }
    },
    required: ['capacity', 'units', 'inventory'],
    description: 'Ship cargo details.'
} as const;

export const $ShipFuel = {
    type: 'object',
    description: "Details of the ship's fuel tanks including how much fuel was consumed during the last transit or action.",
    properties: {
        current: {
            type: 'integer',
            description: "The current amount of fuel in the ship's tanks.",
            minimum: 0
        },
        capacity: {
            type: 'integer',
            description: "The maximum amount of fuel the ship's tanks can hold.",
            minimum: 0
        },
        consumed: {
            type: 'object',
            description: 'An object that only shows up when an action has consumed fuel in the process. Shows the fuel consumption data.',
            properties: {
                amount: {
                    type: 'integer',
                    description: 'The amount of fuel consumed by the most recent transit or action.',
                    minimum: 0
                },
                timestamp: {
                    type: 'string',
                    format: 'date-time',
                    description: 'The time at which the fuel was consumed.'
                }
            },
            required: ['amount', 'timestamp']
        }
    },
    required: ['current', 'capacity']
} as const;

export const $Ship = {
    description: 'Ship details.',
    type: 'object',
    properties: {
        symbol: {
            type: 'string',
            description: 'The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`'
        },
        registration: {
            '$ref': '#/components/schemas/ShipRegistration'
        },
        nav: {
            '$ref': '#/components/schemas/ShipNav'
        },
        crew: {
            '$ref': '#/components/schemas/ShipCrew'
        },
        frame: {
            '$ref': '#/components/schemas/ShipFrame'
        },
        reactor: {
            '$ref': '#/components/schemas/ShipReactor'
        },
        engine: {
            '$ref': '#/components/schemas/ShipEngine'
        },
        cooldown: {
            '$ref': '#/components/schemas/Cooldown'
        },
        modules: {
            type: 'array',
            description: 'Modules installed in this ship.',
            items: {
                '$ref': '#/components/schemas/ShipModule'
            }
        },
        mounts: {
            type: 'array',
            description: 'Mounts installed in this ship.',
            items: {
                '$ref': '#/components/schemas/ShipMount'
            }
        },
        cargo: {
            '$ref': '#/components/schemas/ShipCargo'
        },
        fuel: {
            '$ref': '#/components/schemas/ShipFuel'
        }
    },
    required: ['symbol', 'registration', 'nav', 'crew', 'frame', 'reactor', 'engine', 'modules', 'mounts', 'cargo', 'fuel', 'cooldown']
} as const;

export const $SystemType = {
    type: 'string',
    description: 'The type of system.',
    enum: ['NEUTRON_STAR', 'RED_STAR', 'ORANGE_STAR', 'BLUE_STAR', 'YOUNG_STAR', 'WHITE_DWARF', 'BLACK_HOLE', 'HYPERGIANT', 'NEBULA', 'UNSTABLE']
} as const;

export const $WaypointOrbital = {
    type: 'object',
    description: 'An orbital is another waypoint that orbits a parent waypoint.',
    properties: {
        symbol: {
            type: 'string',
            minLength: 1,
            description: 'The symbol of the orbiting waypoint.'
        }
    },
    required: ['symbol']
} as const;

export const $SystemWaypoint = {
    type: 'object',
    description: 'Waypoint details.',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        type: {
            '$ref': '#/components/schemas/WaypointType'
        },
        x: {
            type: 'integer',
            description: "Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe."
        },
        y: {
            type: 'integer',
            description: "Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe."
        },
        orbitals: {
            type: 'array',
            description: 'Waypoints that orbit this waypoint.',
            items: {
                '$ref': '#/components/schemas/WaypointOrbital'
            }
        },
        orbits: {
            type: 'string',
            minLength: 1,
            description: 'The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.'
        }
    },
    required: ['symbol', 'type', 'x', 'y', 'orbitals']
} as const;

export const $SystemFaction = {
    type: 'object',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/FactionSymbol'
        }
    },
    required: ['symbol']
} as const;

export const $System = {
    type: 'object',
    description: 'System details.',
    properties: {
        symbol: {
            type: 'string',
            minLength: 1,
            description: 'The symbol of the system.'
        },
        sectorSymbol: {
            type: 'string',
            minLength: 1,
            description: 'The symbol of the sector.'
        },
        constellation: {
            type: 'string',
            description: 'The constellation that the system is part of.'
        },
        name: {
            type: 'string',
            description: 'The name of the system.'
        },
        type: {
            '$ref': '#/components/schemas/SystemType'
        },
        x: {
            type: 'integer',
            description: 'Relative position of the system in the sector in the x axis.'
        },
        y: {
            type: 'integer',
            description: 'Relative position of the system in the sector in the y axis.'
        },
        waypoints: {
            type: 'array',
            description: 'Waypoints in this system.',
            items: {
                '$ref': '#/components/schemas/SystemWaypoint'
            }
        },
        factions: {
            type: 'array',
            description: 'Factions that control this system.',
            items: {
                '$ref': '#/components/schemas/SystemFaction'
            }
        }
    },
    required: ['symbol', 'sectorSymbol', 'type', 'x', 'y', 'waypoints', 'factions']
} as const;

export const $Meta = {
    description: 'Meta details for pagination.',
    type: 'object',
    'x-examples': {
        'example-1': {
            total: 6,
            page: 1,
            limit: 20
        }
    },
    properties: {
        total: {
            type: 'integer',
            description: 'Shows the total amount of items of this kind that exist.',
            minimum: 0
        },
        page: {
            type: 'integer',
            default: 1,
            description: 'A page denotes an amount of items, offset from the first item. Each page holds an amount of items equal to the `limit`.',
            minimum: 1
        },
        limit: {
            type: 'integer',
            default: 10,
            description: 'The amount of items in each page. Limits how many items can be fetched at once.',
            minimum: 1,
            maximum: 20
        }
    },
    required: ['total', 'page', 'limit']
} as const;

export const $WaypointFaction = {
    type: 'object',
    description: 'The faction that controls the waypoint.',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/FactionSymbol'
        }
    },
    required: ['symbol']
} as const;

export const $WaypointTraitSymbol = {
    type: 'string',
    description: 'The unique identifier of the trait.',
    enum: ['UNCHARTED', 'UNDER_CONSTRUCTION', 'MARKETPLACE', 'SHIPYARD', 'OUTPOST', 'SCATTERED_SETTLEMENTS', 'SPRAWLING_CITIES', 'MEGA_STRUCTURES', 'PIRATE_BASE', 'OVERCROWDED', 'HIGH_TECH', 'CORRUPT', 'BUREAUCRATIC', 'TRADING_HUB', 'INDUSTRIAL', 'BLACK_MARKET', 'RESEARCH_FACILITY', 'MILITARY_BASE', 'SURVEILLANCE_OUTPOST', 'EXPLORATION_OUTPOST', 'MINERAL_DEPOSITS', 'COMMON_METAL_DEPOSITS', 'PRECIOUS_METAL_DEPOSITS', 'RARE_METAL_DEPOSITS', 'METHANE_POOLS', 'ICE_CRYSTALS', 'EXPLOSIVE_GASES', 'STRONG_MAGNETOSPHERE', 'VIBRANT_AURORAS', 'SALT_FLATS', 'CANYONS', 'PERPETUAL_DAYLIGHT', 'PERPETUAL_OVERCAST', 'DRY_SEABEDS', 'MAGMA_SEAS', 'SUPERVOLCANOES', 'ASH_CLOUDS', 'VAST_RUINS', 'MUTATED_FLORA', 'TERRAFORMED', 'EXTREME_TEMPERATURES', 'EXTREME_PRESSURE', 'DIVERSE_LIFE', 'SCARCE_LIFE', 'FOSSILS', 'WEAK_GRAVITY', 'STRONG_GRAVITY', 'CRUSHING_GRAVITY', 'TOXIC_ATMOSPHERE', 'CORROSIVE_ATMOSPHERE', 'BREATHABLE_ATMOSPHERE', 'THIN_ATMOSPHERE', 'JOVIAN', 'ROCKY', 'VOLCANIC', 'FROZEN', 'SWAMP', 'BARREN', 'TEMPERATE', 'JUNGLE', 'OCEAN', 'RADIOACTIVE', 'MICRO_GRAVITY_ANOMALIES', 'DEBRIS_CLUSTER', 'DEEP_CRATERS', 'SHALLOW_CRATERS', 'UNSTABLE_COMPOSITION', 'HOLLOWED_INTERIOR', 'STRIPPED']
} as const;

export const $WaypointTrait = {
    type: 'object',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/WaypointTraitSymbol'
        },
        name: {
            type: 'string',
            description: 'The name of the trait.'
        },
        description: {
            type: 'string',
            description: 'A description of the trait.'
        }
    },
    required: ['symbol', 'name', 'description']
} as const;

export const $WaypointModifierSymbol = {
    type: 'string',
    description: 'The unique identifier of the modifier.',
    enum: ['STRIPPED', 'UNSTABLE', 'RADIATION_LEAK', 'CRITICAL_LIMIT', 'CIVIL_UNREST']
} as const;

export const $WaypointModifier = {
    type: 'object',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/WaypointModifierSymbol'
        },
        name: {
            type: 'string',
            description: 'The name of the trait.'
        },
        description: {
            type: 'string',
            description: 'A description of the trait.'
        }
    },
    required: ['symbol', 'name', 'description']
} as const;

export const $Chart = {
    type: 'object',
    description: 'The chart of a system or waypoint, which makes the location visible to other agents.',
    properties: {
        waypointSymbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        submittedBy: {
            type: 'string',
            description: 'The agent that submitted the chart for this waypoint.'
        },
        submittedOn: {
            type: 'string',
            format: 'date-time',
            description: 'The time the chart for this waypoint was submitted.'
        }
    }
} as const;

export const $Waypoint = {
    description: 'A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.',
    type: 'object',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        type: {
            '$ref': '#/components/schemas/WaypointType'
        },
        systemSymbol: {
            '$ref': '#/components/schemas/SystemSymbol'
        },
        x: {
            type: 'integer',
            description: "Relative position of the waypoint on the system's x axis. This is not an absolute position in the universe."
        },
        y: {
            type: 'integer',
            description: "Relative position of the waypoint on the system's y axis. This is not an absolute position in the universe."
        },
        orbitals: {
            type: 'array',
            description: 'Waypoints that orbit this waypoint.',
            items: {
                '$ref': '#/components/schemas/WaypointOrbital'
            }
        },
        orbits: {
            type: 'string',
            minLength: 1,
            description: 'The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise this value is undefined.'
        },
        faction: {
            '$ref': '#/components/schemas/WaypointFaction'
        },
        traits: {
            type: 'array',
            description: 'The traits of the waypoint.',
            items: {
                '$ref': '#/components/schemas/WaypointTrait'
            }
        },
        modifiers: {
            type: 'array',
            description: 'The modifiers of the waypoint.',
            items: {
                '$ref': '#/components/schemas/WaypointModifier'
            }
        },
        chart: {
            '$ref': '#/components/schemas/Chart'
        },
        isUnderConstruction: {
            type: 'boolean',
            description: 'True if the waypoint is under construction.'
        }
    },
    required: ['symbol', 'type', 'systemSymbol', 'x', 'y', 'orbitals', 'traits', 'isUnderConstruction']
} as const;

export const $TradeGood = {
    type: 'object',
    description: 'A good that can be traded for other goods or currency.',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/TradeSymbol'
        },
        name: {
            type: 'string',
            description: 'The name of the good.'
        },
        description: {
            type: 'string',
            description: 'The description of the good.'
        }
    },
    required: ['symbol', 'name', 'description']
} as const;

export const $MarketTransaction = {
    type: 'object',
    properties: {
        waypointSymbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        shipSymbol: {
            type: 'string',
            description: 'The symbol of the ship that made the transaction.'
        },
        tradeSymbol: {
            type: 'string',
            description: 'The symbol of the trade good.'
        },
        type: {
            type: 'string',
            description: 'The type of transaction.',
            enum: ['PURCHASE', 'SELL']
        },
        units: {
            type: 'integer',
            description: 'The number of units of the transaction.',
            minimum: 0
        },
        pricePerUnit: {
            type: 'integer',
            description: 'The price per unit of the transaction.',
            minimum: 0
        },
        totalPrice: {
            type: 'integer',
            description: 'The total price of the transaction.',
            minimum: 0
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'The timestamp of the transaction.'
        }
    },
    required: ['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'type', 'units', 'pricePerUnit', 'totalPrice', 'timestamp'],
    description: 'Result of a transaction with a market.'
} as const;

export const $SupplyLevel = {
    type: 'string',
    description: 'The supply level of a trade good.',
    enum: ['SCARCE', 'LIMITED', 'MODERATE', 'HIGH', 'ABUNDANT']
} as const;

export const $ActivityLevel = {
    type: 'string',
    description: 'The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.',
    enum: ['WEAK', 'GROWING', 'STRONG', 'RESTRICTED'],
    'x-enumDescriptions': {
        WEAK: 'Indicates very low production or consumption activity. This may suggest a surplus in supply or a lack of demand.',
        GROWING: 'Represents increasing activity in production or consumption, suggesting a developing market.',
        STRONG: 'Signifies high levels of production or consumption. Indicates a healthy and active market with high demand or supply.',
        RESTRICTED: 'Reflects a bottleneck in production or consumption, possibly due to a lack of supply or demand in related goods.'
    }
} as const;

export const $MarketTradeGood = {
    type: 'object',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/TradeSymbol'
        },
        type: {
            type: 'string',
            description: 'The type of trade good (export, import, or exchange).',
            enum: ['EXPORT', 'IMPORT', 'EXCHANGE']
        },
        tradeVolume: {
            type: 'integer',
            description: 'This is the maximum number of units that can be purchased or sold at this market in a single trade for this good. Trade volume also gives an indication of price volatility. A market with a low trade volume will have large price swings, while high trade volume will be more resilient to price changes.',
            minimum: 1
        },
        supply: {
            '$ref': '#/components/schemas/SupplyLevel'
        },
        activity: {
            '$ref': '#/components/schemas/ActivityLevel'
        },
        purchasePrice: {
            type: 'integer',
            description: 'The price at which this good can be purchased from the market.',
            minimum: 0
        },
        sellPrice: {
            type: 'integer',
            description: 'The price at which this good can be sold to the market.',
            minimum: 0
        }
    },
    required: ['symbol', 'type', 'tradeVolume', 'supply', 'purchasePrice', 'sellPrice']
} as const;

export const $Market = {
    description: 'Market details.',
    type: 'object',
    properties: {
        symbol: {
            type: 'string',
            description: 'The symbol of the market. The symbol is the same as the waypoint where the market is located.'
        },
        exports: {
            type: 'array',
            description: 'The list of goods that are exported from this market.',
            items: {
                '$ref': '#/components/schemas/TradeGood'
            }
        },
        imports: {
            type: 'array',
            description: 'The list of goods that are sought as imports in this market.',
            items: {
                '$ref': '#/components/schemas/TradeGood'
            }
        },
        exchange: {
            type: 'array',
            description: 'The list of goods that are bought and sold between agents at this market.',
            items: {
                '$ref': '#/components/schemas/TradeGood'
            }
        },
        transactions: {
            type: 'array',
            description: 'The list of recent transactions at this market. Visible only when a ship is present at the market.',
            items: {
                '$ref': '#/components/schemas/MarketTransaction'
            }
        },
        tradeGoods: {
            type: 'array',
            description: 'The list of goods that are traded at this market. Visible only when a ship is present at the market.',
            items: {
                '$ref': '#/components/schemas/MarketTradeGood'
            }
        }
    },
    required: ['symbol', 'exports', 'imports', 'exchange']
} as const;

export const $ShipType = {
    description: 'Type of ship',
    type: 'string',
    enum: ['SHIP_PROBE', 'SHIP_MINING_DRONE', 'SHIP_SIPHON_DRONE', 'SHIP_INTERCEPTOR', 'SHIP_LIGHT_HAULER', 'SHIP_COMMAND_FRIGATE', 'SHIP_EXPLORER', 'SHIP_HEAVY_FREIGHTER', 'SHIP_LIGHT_SHUTTLE', 'SHIP_ORE_HOUND', 'SHIP_REFINING_FREIGHTER', 'SHIP_SURVEYOR', 'SHIP_BULK_FREIGHTER']
} as const;

export const $ShipyardTransaction = {
    type: 'object',
    description: 'Results of a transaction with a shipyard.',
    properties: {
        waypointSymbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        shipSymbol: {
            type: 'string',
            deprecated: true,
            description: 'The symbol of the ship type (e.g. SHIP_MINING_DRONE) that was the subject of the transaction. Contrary to what the name implies, this is NOT the symbol of the ship that was purchased.'
        },
        shipType: {
            type: 'string',
            description: 'The symbol of the ship type (e.g. SHIP_MINING_DRONE) that was the subject of the transaction.'
        },
        price: {
            type: 'integer',
            description: 'The price of the transaction.',
            minimum: 0
        },
        agentSymbol: {
            type: 'string',
            description: 'The symbol of the agent that made the transaction.'
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'The timestamp of the transaction.'
        }
    },
    required: ['waypointSymbol', 'shipSymbol', 'shipType', 'price', 'agentSymbol', 'timestamp']
} as const;

export const $ShipyardShip = {
    description: '',
    type: 'object',
    properties: {
        type: {
            '$ref': '#/components/schemas/ShipType'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        supply: {
            '$ref': '#/components/schemas/SupplyLevel'
        },
        activity: {
            '$ref': '#/components/schemas/ActivityLevel'
        },
        purchasePrice: {
            type: 'integer'
        },
        frame: {
            '$ref': '#/components/schemas/ShipFrame'
        },
        reactor: {
            '$ref': '#/components/schemas/ShipReactor'
        },
        engine: {
            '$ref': '#/components/schemas/ShipEngine'
        },
        modules: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ShipModule'
            }
        },
        mounts: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ShipMount'
            }
        },
        crew: {
            type: 'object',
            properties: {
                required: {
                    type: 'integer'
                },
                capacity: {
                    type: 'integer'
                }
            },
            required: ['required', 'capacity']
        }
    },
    required: ['type', 'symbol', 'name', 'description', 'supply', 'purchasePrice', 'frame', 'reactor', 'engine', 'modules', 'mounts', 'crew']
} as const;

export const $Shipyard = {
    description: 'Shipyard details.',
    type: 'object',
    properties: {
        symbol: {
            type: 'string',
            description: 'The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.',
            minLength: 1
        },
        shipTypes: {
            type: 'array',
            description: 'The list of ship types available for purchase at this shipyard.',
            items: {
                type: 'object',
                properties: {
                    type: {
                        '$ref': '#/components/schemas/ShipType'
                    }
                },
                required: ['type']
            }
        },
        transactions: {
            type: 'array',
            description: 'The list of recent transactions at this shipyard.',
            items: {
                '$ref': '#/components/schemas/ShipyardTransaction'
            }
        },
        ships: {
            type: 'array',
            description: 'The ships that are currently available for purchase at the shipyard.',
            items: {
                '$ref': '#/components/schemas/ShipyardShip'
            }
        },
        modificationsFee: {
            type: 'integer',
            description: 'The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.'
        }
    },
    required: ['symbol', 'shipTypes', 'modificationsFee']
} as const;

export const $JumpGate = {
    type: 'object',
    description: '',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        connections: {
            type: 'array',
            description: 'All the gates that are connected to this waypoint.',
            items: {
                type: 'string',
                description: 'The symbol of the waypoint that has a corresponding gate.'
            }
        }
    },
    required: ['symbol', 'connections']
} as const;

export const $ConstructionMaterial = {
    description: 'The details of the required construction materials for a given waypoint under construction.',
    type: 'object',
    properties: {
        tradeSymbol: {
            '$ref': '#/components/schemas/TradeSymbol'
        },
        required: {
            type: 'integer',
            description: 'The number of units required.'
        },
        fulfilled: {
            type: 'integer',
            description: 'The number of units fulfilled toward the required amount.'
        }
    },
    required: ['tradeSymbol', 'required', 'fulfilled']
} as const;

export const $Construction = {
    type: 'object',
    description: 'The construction details of a waypoint.',
    properties: {
        symbol: {
            type: 'string',
            description: 'The symbol of the waypoint.'
        },
        materials: {
            type: 'array',
            description: 'The materials required to construct the waypoint.',
            items: {
                '$ref': '#/components/schemas/ConstructionMaterial'
            }
        },
        isComplete: {
            type: 'boolean',
            description: 'Whether the waypoint has been constructed.'
        }
    },
    required: ['symbol', 'materials', 'isComplete']
} as const;

export const $SurveyDeposit = {
    type: 'object',
    description: 'A surveyed deposit of a mineral or resource available for extraction.',
    properties: {
        symbol: {
            type: 'string',
            description: 'The symbol of the deposit.'
        }
    },
    required: ['symbol']
} as const;

export const $Survey = {
    description: 'A resource survey of a waypoint, detailing a specific extraction location and the types of resources that can be found there.',
    type: 'object',
    properties: {
        signature: {
            type: 'string',
            description: 'A unique signature for the location of this survey. This signature is verified when attempting an extraction using this survey.',
            minLength: 1
        },
        symbol: {
            type: 'string',
            description: 'The symbol of the waypoint that this survey is for.',
            minLength: 1
        },
        deposits: {
            type: 'array',
            description: 'A list of deposits that can be found at this location. A ship will extract one of these deposits when using this survey in an extraction request. If multiple deposits of the same type are present, the chance of extracting that deposit is increased.',
            items: {
                '$ref': '#/components/schemas/SurveyDeposit'
            }
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            description: 'The date and time when the survey expires. After this date and time, the survey will no longer be available for extraction.'
        },
        size: {
            type: 'string',
            description: 'The size of the deposit. This value indicates how much can be extracted from the survey before it is exhausted.',
            enum: ['SMALL', 'MODERATE', 'LARGE']
        }
    },
    required: ['signature', 'symbol', 'deposits', 'expiration', 'size']
} as const;

export const $ExtractionYield = {
    type: 'object',
    description: 'A yield from the extraction operation.',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/TradeSymbol'
        },
        units: {
            type: 'integer',
            description: "The number of units extracted that were placed into the ship's cargo hold."
        }
    },
    required: ['symbol', 'units']
} as const;

export const $Extraction = {
    description: 'Extraction details.',
    type: 'object',
    properties: {
        shipSymbol: {
            type: 'string',
            minLength: 1,
            description: 'Symbol of the ship that executed the extraction.'
        },
        yield: {
            '$ref': '#/components/schemas/ExtractionYield'
        }
    },
    required: ['shipSymbol', 'yield']
} as const;

export const $ShipConditionEvent = {
    type: 'object',
    description: "An event that represents damage or wear to a ship's reactor, frame, or engine, reducing the condition of the ship.",
    properties: {
        symbol: {
            type: 'string',
            enum: ['REACTOR_OVERLOAD', 'ENERGY_SPIKE_FROM_MINERAL', 'SOLAR_FLARE_INTERFERENCE', 'COOLANT_LEAK', 'POWER_DISTRIBUTION_FLUCTUATION', 'MAGNETIC_FIELD_DISRUPTION', 'HULL_MICROMETEORITE_STRIKES', 'STRUCTURAL_STRESS_FRACTURES', 'CORROSIVE_MINERAL_CONTAMINATION', 'THERMAL_EXPANSION_MISMATCH', 'VIBRATION_DAMAGE_FROM_DRILLING', 'ELECTROMAGNETIC_FIELD_INTERFERENCE', 'IMPACT_WITH_EXTRACTED_DEBRIS', 'FUEL_EFFICIENCY_DEGRADATION', 'COOLANT_SYSTEM_AGEING', 'DUST_MICROABRASIONS', 'THRUSTER_NOZZLE_WEAR', 'EXHAUST_PORT_CLOGGING', 'BEARING_LUBRICATION_FADE', 'SENSOR_CALIBRATION_DRIFT', 'HULL_MICROMETEORITE_DAMAGE', 'SPACE_DEBRIS_COLLISION', 'THERMAL_STRESS', 'VIBRATION_OVERLOAD', 'PRESSURE_DIFFERENTIAL_STRESS', 'ELECTROMAGNETIC_SURGE_EFFECTS', 'ATMOSPHERIC_ENTRY_HEAT']
        },
        component: {
            type: 'string',
            enum: ['FRAME', 'REACTOR', 'ENGINE']
        },
        name: {
            type: 'string',
            description: 'The name of the event.'
        },
        description: {
            type: 'string',
            description: 'A description of the event.'
        }
    },
    required: ['symbol', 'component', 'name', 'description']
} as const;

export const $SiphonYield = {
    type: 'object',
    description: 'A yield from the siphon operation.',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/TradeSymbol'
        },
        units: {
            type: 'integer',
            description: "The number of units siphoned that were placed into the ship's cargo hold."
        }
    },
    required: ['symbol', 'units']
} as const;

export const $Siphon = {
    description: 'Siphon details.',
    type: 'object',
    properties: {
        shipSymbol: {
            type: 'string',
            minLength: 1,
            description: 'Symbol of the ship that executed the siphon.'
        },
        yield: {
            '$ref': '#/components/schemas/SiphonYield'
        }
    },
    required: ['shipSymbol', 'yield']
} as const;

export const $ScannedSystem = {
    description: 'Details of a system was that scanned.',
    type: 'object',
    properties: {
        symbol: {
            type: 'string',
            minLength: 1,
            description: 'Symbol of the system.'
        },
        sectorSymbol: {
            type: 'string',
            minLength: 1,
            description: "Symbol of the system's sector."
        },
        type: {
            '$ref': '#/components/schemas/SystemType'
        },
        x: {
            type: 'integer',
            description: 'Position in the universe in the x axis.'
        },
        y: {
            type: 'integer',
            description: 'Position in the universe in the y axis.'
        },
        distance: {
            type: 'integer',
            description: "The system's distance from the scanning ship."
        }
    },
    required: ['symbol', 'sectorSymbol', 'type', 'x', 'y', 'distance']
} as const;

export const $ScannedWaypoint = {
    description: 'A waypoint that was scanned by a ship.',
    type: 'object',
    properties: {
        symbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        type: {
            '$ref': '#/components/schemas/WaypointType'
        },
        systemSymbol: {
            '$ref': '#/components/schemas/SystemSymbol'
        },
        x: {
            type: 'integer',
            description: 'Position in the universe in the x axis.'
        },
        y: {
            type: 'integer',
            description: 'Position in the universe in the y axis.'
        },
        orbitals: {
            type: 'array',
            description: 'List of waypoints that orbit this waypoint.',
            items: {
                '$ref': '#/components/schemas/WaypointOrbital'
            }
        },
        faction: {
            '$ref': '#/components/schemas/WaypointFaction'
        },
        traits: {
            type: 'array',
            description: 'The traits of the waypoint.',
            items: {
                '$ref': '#/components/schemas/WaypointTrait'
            }
        },
        chart: {
            '$ref': '#/components/schemas/Chart'
        }
    },
    required: ['symbol', 'type', 'systemSymbol', 'x', 'y', 'orbitals', 'traits']
} as const;

export const $ScannedShip = {
    description: 'The ship that was scanned. Details include information about the ship that could be detected by the scanner.',
    type: 'object',
    properties: {
        symbol: {
            type: 'string',
            description: 'The globally unique identifier of the ship.'
        },
        registration: {
            '$ref': '#/components/schemas/ShipRegistration'
        },
        nav: {
            '$ref': '#/components/schemas/ShipNav'
        },
        frame: {
            type: 'object',
            description: 'The frame of the ship.',
            properties: {
                symbol: {
                    type: 'string',
                    description: 'The symbol of the frame.'
                }
            },
            required: ['symbol']
        },
        reactor: {
            type: 'object',
            description: 'The reactor of the ship.',
            properties: {
                symbol: {
                    type: 'string',
                    description: 'The symbol of the reactor.'
                }
            },
            required: ['symbol']
        },
        engine: {
            type: 'object',
            description: 'The engine of the ship.',
            required: ['symbol'],
            properties: {
                symbol: {
                    type: 'string',
                    description: 'The symbol of the engine.'
                }
            }
        },
        mounts: {
            type: 'array',
            description: 'List of mounts installed in the ship.',
            items: {
                type: 'object',
                description: 'A mount on the ship.',
                properties: {
                    symbol: {
                        type: 'string',
                        description: 'The symbol of the mount.'
                    }
                },
                required: ['symbol']
            }
        }
    },
    required: ['symbol', 'registration', 'nav', 'engine']
} as const;

export const $ShipModificationTransaction = {
    type: 'object',
    properties: {
        waypointSymbol: {
            type: 'string',
            description: 'The symbol of the waypoint where the transaction took place.'
        },
        shipSymbol: {
            type: 'string',
            description: 'The symbol of the ship that made the transaction.'
        },
        tradeSymbol: {
            type: 'string',
            description: 'The symbol of the trade good.'
        },
        totalPrice: {
            type: 'integer',
            description: 'The total price of the transaction.',
            minimum: 0
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'The timestamp of the transaction.'
        }
    },
    required: ['waypointSymbol', 'shipSymbol', 'tradeSymbol', 'totalPrice', 'timestamp'],
    description: 'Result of a transaction for a ship modification, such as installing a mount or a module.'
} as const;

export const $ScrapTransaction = {
    type: 'object',
    properties: {
        waypointSymbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        shipSymbol: {
            type: 'string',
            description: 'The symbol of the ship.'
        },
        totalPrice: {
            type: 'integer',
            description: 'The total price of the transaction.',
            minimum: 0
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'The timestamp of the transaction.'
        }
    },
    required: ['waypointSymbol', 'shipSymbol', 'totalPrice', 'timestamp'],
    description: 'Result of a scrap transaction.'
} as const;

export const $RepairTransaction = {
    type: 'object',
    properties: {
        waypointSymbol: {
            '$ref': '#/components/schemas/WaypointSymbol'
        },
        shipSymbol: {
            type: 'string',
            description: 'The symbol of the ship.'
        },
        totalPrice: {
            type: 'integer',
            description: 'The total price of the transaction.',
            minimum: 0
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'The timestamp of the transaction.'
        }
    },
    required: ['waypointSymbol', 'shipSymbol', 'totalPrice', 'timestamp'],
    description: 'Result of a repair transaction.'
} as const;